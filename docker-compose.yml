---

services:
  plex:
    image: lscr.io/linuxserver/plex:${PLEX_VERSION}
    container_name: plex
    networks:
      home_network:
    ports: 
      - 32400:32400
      - 1901:1900/udp
      - 35353:5353/udp
      - 8324:8324
      - 32410:32410/udp
      - 32412:32412/udp
      - 32413:32413/udp
      - 32414:32414/udp
      - 32469:32469
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
      - VERSION=docker
      - PLEX_CLAIM= #optional
    volumes:
      - plex_data:/config
      - $PWD/plex/.plexignore:/movies/.plexignore:ro
      - ${PLEX_MOVIES_1_PATH}:/movies/1:ro
      # - ${PLEX_MOVIES_2_PATH}:/movies/2:ro
      - ${PLEX_SERIES_1_PATH}:/series/1:ro
      # - ${PLEX_SERIES_2_PATH}:/series/2:ro
      - ${PLEX_MUSIC_1_PATH}:/music/1:ro
      # - ${PLEX_MUSIC_2_PATH}:/music/2:ro
    restart: unless-stopped
    #read_only: true
    security_opt:  
      - no-new-privileges
    healthcheck:
      test: "curl --connect-timeout 15 --silent --show-error --fail http://localhost:32400/identity || exit 1"
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s
      start_interval: 5s
    labels:
      - "traefik.enable=true"
      # Middlewares
      # - "traefik.http.middlewares.stripprefix-plex.stripprefix.prefixes=/${PLEX_PATH}"
      # HTTP router
      - "traefik.http.routers.plex_http.rule=(Host(`${DOMAIN}`) && PathPrefix(`/${PLEX_PATH}`))"
      - "traefik.http.routers.plex_http.entrypoints=web"
      # HTTPS router
      - "traefik.http.routers.plex_https.rule=(Host(`${DOMAIN}`) && PathPrefix(`/${PLEX_PATH}`))"
      - "traefik.http.routers.plex_https.entrypoints=websecure2"
      - "traefik.http.routers.plex_https.middlewares=plex-cors-headers@file,plex-csp-headers@file"
      # HTTP service
      - "traefik.http.services.plex.loadbalancer.server.port=32400"
    depends_on:
      - traefik

  homeassistant:
    container_name: homeassistant
    image: ghcr.io/home-assistant/home-assistant:${HOMEASSISTANT_VERSION}
    volumes:
      - $PWD/home-assistant:/config:rw
    restart: unless-stopped
    privileged: true
    networks:
      home_network:
    ports:
      - 8123:8123
      - 5683:5683/udp
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
      - REVERSE_PROXY_IP=${TRAEFIK_IP}
      - TRAEFIK_URL=${TRAEFIK_URL}
      - ADGUARD_URL=${ADGUARD_URL}
      - SHELLY_URL=${SHELLY_URL}
      - PLEX_URL=${PLEX_URL}
    #read_only: true
    security_opt:  
      - no-new-privileges
    healthcheck:
      test: "curl --connect-timeout 15 --silent --show-error --fail http://localhost:8123/ || exit 1"
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s
      start_interval: 5s
    labels:
      - "traefik.enable=true"
      # Middlewares
      - "traefik.http.middlewares.stripprefix-homeassistant.stripprefix.prefixes=/${HOMEASSISTANT_PATH}"
      # HTTP rule
      - "traefik.http.routers.homeassistant_http.rule=(Host(`${DOMAIN}`) && PathPrefix(`/${HOMEASSISTANT_PATH}`))"
      - "traefik.http.routers.homeassistant_http.entrypoints=web"
      # HTTPS rule
      - "traefik.http.routers.homeassistant_https.rule=(Host(`${DOMAIN}`) && PathPrefix(`/${HOMEASSISTANT_PATH}`))"
      - "traefik.http.routers.homeassistant_https.entrypoints=websecure"
      - "traefik.http.routers.homeassistant_https.middlewares=cors-headers@file,ha-csp-headers@file,stripprefix-homeassistant"
      # HTTP service
      - "traefik.http.services.homeassistant.loadbalancer.server.port=8123"
    depends_on:
      - traefik

  # node-red:
  #   build: node-red/
  #   container_name: node-red
  #   networks:
  #     home_network:
  #   environment:
  #     TZ: ${TZ}
  #   restart: unless-stopped
  #   ports:
  #     - "1880:1880"
  #   volumes:
  #     - $PWD/node-red:/data:rw

  # adguard:
  #   image: adguard/adguardhome:latest
  #   container_name: adguard
  #   networks:
  #     home_network:
  #   ports: 
  #     - 3000:3000/tcp
  #     - 8090:80/tcp
  #     - 53:53/tcp
  #     - 53:53/udp
  #   volumes:
  #     - $PWD/adguard/work:/opt/adguardhome/work
  #     - $PWD/adguard/conf:/opt/adguardhome/conf
  #   environment:
  #     - TZ=${TZ}
  #   read_only: true
  #   security_opt:
  #     - no-new-privileges
  #   healthcheck:
  #     test: "wget -q --no-verbose --tries=1 --spider http://localhost:80/ || exit 1"
  #     interval: 30s
  #     timeout: 5s
  #     retries: 3
  #     start_period: 15s
  #     start_interval: 5s
  #   labels:
  #     - "traefik.enable=true"
  #     # Middlewares
  #     - "traefik.http.middlewares.stripprefix-adguard.stripprefix.prefixes=/${ADGUARD_PATH}"
  #     # HTTP rule
  #     - "traefik.http.routers.adguard_http.rule=(Host(`${DOMAIN}`) && PathPrefix(`/${ADGUARD_PATH}`))"
  #     - "traefik.http.routers.adguard_http.entrypoints=web"
  #     # HTTPS rule
  #     - "traefik.http.routers.adguard_https.rule=(Host(`${DOMAIN}`) && PathPrefix(`/${ADGUARD_PATH}`))"
  #     - "traefik.http.routers.adguard_https.entrypoints=websecure"
  #     - "traefik.http.routers.adguard_https.middlewares=stripprefix-adguard"
  #     # HTTP service
  #     - "traefik.http.services.adguard.loadbalancer.server.port=80"
  #   restart: unless-stopped
  #   depends_on:
  #     - traefik

  traefik:
    image: traefik:${TRAEFIK_VERSION}
    container_name: traefik
    networks:
      home_network:
        ipv4_address: ${TRAEFIK_IP}
      socket_proxy:
    # network_mode: host
    ports: 
      - 8080:8080/tcp
      - 8088:80/tcp
      - 443:443/tcp
      - 8443:8443/tcp
    volumes:
      - $PWD/traefik/traefik.yml:/etc/traefik/traefik.yml
      - $PWD/traefik/dynamic.yml:/etc/traefik/dynamic.yml
      - $PWD/acme:/acme
    environment:
      - TZ=${TZ}
      - DOMAIN=${DOMAIN}
      - SHELLY_IP=${SHELLY_IP}
      - SHELLY_PATH=${SHELLY_PATH}
      - UTORRENT_IP=${UTORRENT_IP}
      - UTORRENT_PATH=${UTORRENT_PATH}
      - UTORRENT_URL=${UTORRENT_URL}
      - HOMEASSISTANT_URL=${HOMEASSISTANT_URL}
    # read_only: true
    security_opt:
      - no-new-privileges
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s
      start_interval: 5s
    labels:
      - "traefik.enable=true"
      # Middlewares
      - "traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_USERS}"
      - "traefik.http.middlewares.stripprefix-dashboard.stripprefix.prefixes=/${TRAEFIK_PATH}"
      - "traefik.http.middlewares.traefik-ipallowlist.ipallowlist.sourcerange=192.168.0.0/22,172.20.0.1/24"
      # HTTPS config
      - "traefik.http.routers.dashboard_https.rule=(Host(`${DOMAIN}`) && PathPrefix(`/${TRAEFIK_PATH}`))"
      - "traefik.http.routers.dashboard_https.entrypoints=websecure"
      - "traefik.http.routers.dashboard_https.service=api@internal"
      - "traefik.http.routers.dashboard_https.middlewares=traefik-auth,stripprefix-dashboard,traefik-ipallowlist"

      # HTTP config
      - "traefik.http.routers.dashboard_http.rule=(Host(`${DOMAIN}`) && PathPrefix(`/${TRAEFIK_PATH}`))"
      - "traefik.http.routers.dashboard_http.entrypoints=web"
      # HTTP service
      - "traefik.http.services.dashboard_https.loadbalancer.server.port=8080"
    restart: unless-stopped
    depends_on:
      - modsec
      - socket-proxy

  # sqlitebrowser:
  #   image: lscr.io/linuxserver/sqlitebrowser:latest
  #   container_name: sqlitebrowser
  #   security_opt:
  #     - seccomp:unconfined #optional
  #   environment:
  #     - PUID=1000
  #     - PGID=1000
  #     - TZ=Etc/UTC
  #   volumes:
  #     - $PWD/sqlitebrowser:/config
  #     - $PWD/home-assistant:/data:rw
  #   ports:
  #     - 3002:3000
  #     - 3001:3001
  #   restart: "no"

  # postgresql:
  #   image: docker.io/library/postgres:16-alpine
  #   container_name: postgres
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
  #     start_period: 20s
  #     interval: 30s
  #     retries: 5
  #     timeout: 5s
  #   volumes:
  #     - database:/var/lib/postgresql/data
  #   environment:
  #     POSTGRES_PASSWORD: ${PG_PASS:?database password required}
  #     POSTGRES_USER: ${PG_USER:-authentik}
  #     POSTGRES_DB: ${PG_DB:-authentik}
  #   env_file:
  #     - .env
  #   networks:
  #     - core_network
  # redis:
  #   image: docker.io/library/redis:alpine
  #   container_name: redis
  #   command: --save 60 1 --loglevel warning
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
  #     start_period: 20s
  #     interval: 30s
  #     retries: 5
  #     timeout: 3s
  #   volumes:
  #     - redis:/data
  #   networks:
  #     - core_network
  # server:
  #   image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2024.6.5}
  #   container_name: auth-server
  #   restart: unless-stopped
  #   command: server
  #   environment:
  #     AUTHENTIK_REDIS__HOST: redis
  #     AUTHENTIK_REDIS__DB: 1
  #     AUTHENTIK_POSTGRESQL__HOST: postgresql
  #     AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
  #     AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
  #     AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
  #   volumes:
  #     - ./authentik/media:/media
  #     - ./authentik/custom-templates:/templates
  #   env_file:
  #     - .env
  #   ports:
  #     - "${COMPOSE_PORT_HTTP:-9000}:9000"
  #     - "${COMPOSE_PORT_HTTPS:-9443}:9443"
  #   depends_on:
  #     - postgresql
  #     - redis
  #   networks:
  #     home_network:
  #       ipv4_address: 172.20.0.20
  #     core_network:
  # worker:
  #   image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2024.6.4}
  #   container_name: auth-worker
  #   restart: unless-stopped
  #   command: worker
  #   environment:
  #     AUTHENTIK_REDIS__HOST: redis
  #     AUTHENTIK_REDIS__DB: 1
  #     AUTHENTIK_POSTGRESQL__HOST: postgresql
  #     AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
  #     AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
  #     AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
  #   # `user: root` and the docker socket volume are optional.
  #   # See more for the docker socket integration here:
  #   # https://goauthentik.io/docs/outposts/integrations/docker
  #   # Removing `user: root` also prevents the worker from fixing the permissions
  #   # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
  #   # (1000:1000 by default)
  #   user: root
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - ./authentik/media:/media
  #     - ./authentik/certs:/certs
  #     - ./authentik/custom-templates:/templates
  #   env_file:
  #     - .env
  #   depends_on:
  #     - postgresql
  #     - redis
  #   networks:
  #     home_network:
  #       ipv4_address: 172.20.0.21
  #     core_network:

  portainer:
    image: portainer/portainer-ce:${PORTAINER_VERSION}
    command: -H tcp://portainer_socket:2375 --tlsskipverify --base-url /portainer/ --log-level DEBUG
    container_name: portainer
    ports:
      - "9999:9000"
      - "8000:8000"
    volumes:
      - portainer_data:/data
      # - //var/run/docker.sock:/var/run/docker.sock
    networks:
      socket_proxy:
      home_network:
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      # Middlewares
      - "traefik.http.middlewares.stripprefix-portainer.stripprefix.prefixes=/${PORTAINER_PATH}"
      # HTTP rule
      - "traefik.http.routers.portainer_http.rule=(Host(`${DOMAIN}`) && PathPrefix(`/${PORTAINER_PATH}`))"
      - "traefik.http.routers.portainer_http.entrypoints=web"
      # HTTPS rule
      - "traefik.http.routers.portainer_https.rule=(Host(`${DOMAIN}`) && PathPrefix(`/${PORTAINER_PATH}`))"
      - "traefik.http.routers.portainer_https.entrypoints=websecure"
      - "traefik.http.routers.portainer_https.middlewares=stripprefix-portainer,csp-headers@file"
      # HTTP service
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
    healthcheck:
      test: "wget --no-verbose --tries=3 --spider http://localhost:9000/api/system/status || exit 1"
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 30s
    depends_on:
      - traefik
  
  modsec:
    image: owasp/modsecurity-crs:${MODESEC_VERSION}
    container_name: modsec
    ports:
      - "8888:8080"
    environment:
      - PARANOIA=1
      - ANOMALY_INBOUND=10
      - ANOMALY_OUTBOUND=5
      - BACKEND=http://dummy
    networks:
      home_network:
    restart: unless-stopped
    healthcheck:
      test: "curl --connect-timeout 15 --silent --show-error --fail http://localhost:8080/healthz || exit 1"
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s
      start_interval: 5s
    depends_on:
      - dummy
  
  dummy:
    image: traefik/whoami
    container_name: dummy
    ports:
      - "12380:80"
    networks:
      home_network:
    restart: unless-stopped
    # healthcheck:
    #   test: ["CMD", "/curl", "-f", "http://localhost:80/health"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 15s

  socket-proxy:
    image: lscr.io/linuxserver/socket-proxy:${SOCKET_PROXY_VERSION}
    container_name: socket-proxy
    env_file:
      - socket-proxy/.env
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      socket_proxy:
    restart: unless-stopped
    read_only: true
    tmpfs:
      - /run
    healthcheck:
      test: wget --spider http://localhost:2375/version || exit 1
      interval: "29s"
      timeout: "5s"
      retries: 3
      start_period: "21s"

volumes:
  portainer_data:
  database:
    driver: local
  redis:
    driver: local
  plex_data:

networks:
  home_network:
    name: home_network
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: ${HOME_SUBNET}
  core_network:
    name: core_network
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.21.0.0/24
  # agent_network:
  #   driver: overlay
  socket_proxy:
    name: socket_proxy
    driver: bridge
    ipam:
      config:
        - subnet: ${SOCKET_PROXY_SUBNET}
